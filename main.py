import streamlit as st
from response import generate_response
from summary import generate_summary
from transcribe import generate_transcript

# Page configuration
st.set_page_config(layout="wide", page_title="MediaSleuth360", page_icon="üîç")

# CSS for custom sidebar width
css = '''
<style>
    [data-testid="stSidebar"][aria-expanded="true"] {
        width: 700px;
    }
    [data-testid="stSidebar"]{
        min-width: 400px;
        max-width: 900px;
    }
    
    [data-testid="stSidebar"][aria-expanded="false"] {
        min-width: 0px;
        max-width: 0px;
    }

</style>
'''
st.markdown(css, unsafe_allow_html=True)

def display_instructions(expanded=True) -> None:
    # Display instructions in an expanded state
    st.expander(":Bold[‚ùóInstructions]", expanded=expanded).markdown("""
    1. Upload an audio or video file in any language, make sure media file is less than 200MB.
    2. The media summary will be displayed below the media player in English Language.
    3. Type your question in the chatbox about the media content you uploaded.
    4. The AI assistant will respond to your prompt after analyzing the media.
    """)

if not ('file' in st.session_state and 'type' in st.session_state):
    # Welcome message
    st.html("<center><h1>Welcome to MediaSleuth360</h1></center>")

    display_instructions()

    st.html("<h3>Upload Media File</h3>")

    # Upload file, only accept one file
    st.session_state.file = file = st.file_uploader(
        "Upload an audio or video file to get started.", 
        accept_multiple_files=False, 
        label_visibility="collapsed"
    )

    if file:
        if file.type.startswith("video") or file.type.startswith("audio"):
            st.session_state.type = file.type.split("/")[0]
            st.rerun()
        else:
            st.error("Please upload a video or audio file.")
else:
    file = st.session_state.file
    filetype = st.session_state.type

    # Sidebar
    with st.sidebar:
        # Display media file
        if filetype == "video":
            st.video(file)
        else:
            st.audio(file)

        tab1, tab2 = st.tabs(["Summary", "Transcription"])

        # Generate Summaryüìã
        with tab1:
            st.markdown(generate_summary(file, filetype))

        # Generate Transcriptionüìã
        with tab2:
            st.markdown(generate_transcript(file, filetype).split('Transcript:\n')[1].replace('\n', '<br>'), unsafe_allow_html=True)

    st.html("""<div style="background-color: #ffcccc; padding: 10px; border-radius: 5px; text-align: center;">
                <span style="color: red; font-weight: bold;">
                    NOTE: The responses are generated by AI and relies on the speech in the media \
    therefore they can be inaccurate. Double verify important information.
                </span>
            </div>""")

    system_prompt = f"""You are an AI assistant for media analysis. \
You will assist users with queries about the uploaded {filetype} file. \
Your task is to provide relevant and concise information with timestamps. \
Users may ask questions like:

- \"Can you provide timestamps for when [specific topic] is discussed?\"
- \"What are the main topics covered in the {filetype}?\"
- \"Give me the timestamps for key points in the {filetype}.\"

{filetype} Context: {generate_transcript(file, filetype)}

NOTE: Make sure if the question is not relevant to the {filetype} context \
reply with a very short response in 10 words like 'your question is out of scope.'.
"""

    # initialize st.session_state.messages
    if 'messages' not in st.session_state:
        st.session_state.messages = [
            {
                "role": "assistant",
                "content": f"Hello! I am your AI assistant for media analysis. I'd be happy to help you with your query about the uploaded {file.type.split('/')[0]} file."
            }
        ]

    # Display chat messages from history on app rerun
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Chat input
    if prompt := st.chat_input("What would you like to know about the media?"):
        st.session_state.messages.append(
            {
                "role": "user",
                "content": prompt
            }
        )

        # Display user prompt in chat messages
        with st.chat_message("user"):
            st.markdown(prompt)

        # Generate response from AI assistant
        response = generate_response(system_prompt, prompt)

        # Add assistant response to chat history
        st.session_state.messages.append(
            {
                "role": "assistant",
                "content": response
            }
        )

        # Display assistant response in chat messages
        with st.chat_message("assistant"):
            st.markdown(response)