import streamlit as st
import time

st.set_page_config(layout="wide", page_title="MediaSleuth360", page_icon="üîç")

if not ('file' in st.session_state and 'type' in st.session_state):
    # Welcome message
    st.html("<center><h1>Welcome to MediaSleuth360</h1></center>")

    # Display instructions in an expanded state
    st.expander(":Bold[‚ùóInstructions]", expanded=True).markdown("""
    1. Upload an audio or video file.
    2. The media summary will be displayed below the chatbox.
    3. Type your question in the chatbox about the media content you uploaded.
    4. The AI assistant will respond to your prompt after analyzing the media.
    """)

    st.html("<h3>Upload Media File</h3>")

    # Upload file, only accept one file
    st.session_state.file = file = st.file_uploader("Upload an audio or video file to get started.", accept_multiple_files=False, label_visibility="collapsed")

    if file:
        # Display error message if file is not a video or audio file
        if file.type.startswith("video") or file.type.startswith("audio"):
            st.session_state.type = file.type
            st.session_state.start_time = 0
            st.rerun()
        else:
            st.error("Please upload a video or audio file.")
else:
    file = st.session_state.file
    start_time = st.session_state.start_time

    st.html("""<div style="background-color: #ffcccc; padding: 10px; border-radius: 5px; text-align: center;">
            <span style="color: red; font-weight: bold;">
                NOTE: The responses are generated by AI and can be inaccurate. Double verify important info.
            </span>
            </div>""")

    # Create two columns
    left_column, right_column = st.columns((5,4))

    # Left column - Media player
    with left_column:
        # Display media file
        if file.type.startswith("video"):
            st.video(file, start_time=start_time)
        else:
            st.audio(file, start_time=start_time)

        # Media summary
        st.subheader("Media Summary")
        summary = "This is a placeholder for the media summary that will be generated by an LLM."
        st.write(summary)

    # Right column - Chatbox
    with right_column:
        # Chat messages container
        chat_container = st.container(border=True, height=500)

        # Display chat messages from history on app rerun
        if 'messages' not in st.session_state:
            st.session_state.messages = []

        with chat_container:
            for message in st.session_state.messages:
                with st.chat_message(message["role"]):
                    st.markdown(message["content"])

        # Chat input
        if prompt := st.chat_input("What would you like to know about the media?"):
            st.session_state.messages.append({"role": "user", "content": prompt})

            # Display user message in chat message container
            with chat_container:
                with st.chat_message("user"):
                    st.markdown(prompt)

            # Display assistant response in chat message container
            with chat_container:
                with st.chat_message("assistant"):
                    message_placeholder = st.empty()
                    full_response = ""
                    assistant_response = "This is a simulated response from the AI assistant. In a real application, this would be generated by an LLM based on the video content and user's question."
                    
                    # Simulate stream of response with milliseconds delay
                    for chunk in assistant_response.split():
                        full_response += chunk + " "
                        time.sleep(0.05)
                        # Add a blinking cursor to simulate typing
                        message_placeholder.markdown(full_response + "‚ñå")
                    message_placeholder.markdown(full_response)
            
            # Add assistant response to chat history
            st.session_state.messages.append({"role": "assistant", "content": full_response})
